<!doctype html>


<html lang="en-us">


<head>


    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">


    <meta content="utf-8" http-equiv="encoding">


    <title>Sign-In</title>





    <!-- Core widget js and css -->
    <script src="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/js/okta-sign-in.min.js"
        type="text/javascript"></script>
    <link href="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/css/okta-sign-in.min.css"
        type="text/css" rel="stylesheet">
    <!-- Optional, customizable css theme options. Link your own customized copy of this file or override styles in-line -->
    <link href="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/css/okta-theme.css" type="text/css"
        rel="stylesheet">

</head>


<body>
    <div style='position:absolute;z-index:0;left:0;top:0;width:100%;height:100%'>
        <img src='/bg_image.png' style='width:100%;height:100%' alt='[]' />
    </div>
    <!-- Render the login widget here -->
    <div id="okta-login-container"></div>
    <!-- Script to init the widget -->

    <script>


        var orgUrl = 'https://ienergycloud.okta.com'; //URL of Okta Tenant


        var webSiteUrl = document.URL; //URL of PROD site hosting Login Widget


        var oktaSignIn = new OktaSignIn({


            baseUrl: orgUrl,


            clientId: '0oax7pypbPV9xxQ0J2p6', // ID of OIDC app in Okta


            logo: '/ie_ds365_logo_lg.svg',


            redirectUri: webSiteUrl,


            authParams: {


                responseType: ['id_token', 'token'],


                scopes: ['openid', 'profile'],


                issuer: 'https://ienergycloud.okta.com/oauth2/ausxnqcbnLD4IAS9X2p6',
                //URL of OAuth server in Okta


                authorizeUrl: 'https://ienergycloud.okta.com/oauth2/ausxnqcbnLD4IAS9X2p6/v1/authorize'


            },





            features: {


                router: true,


                idpDiscovery: true,


                rememberMe: true,


                smsRecovery: true,


                selfServiceUnlock: true,


                multiOptionalFactorEnroll: true


            }


        });


        oktaSignIn.session.get(function (res) {


            if (res.status === 'ACTIVE') {


                var authClient = new OktaAuth({


                    url: orgUrl,


                    clientId: '0oax7pypbPV9xxQ0J2p6',


                    redirectUri: webSiteUrl,


                    issuer: 'https://ienergycloud.okta.com/oauth2/ausxnqcbnLD4IAS9X2p6'


                });


                authClient.token.parseFromUrl()


                    .then(function (tokenOrTokens) {


                        location.href = tokenOrTokens[0].claims.URLHeader;


                    })


                    .catch(function (err) {


                        authClient.token.getWithRedirect({


                            responseType: ['id_token', 'token'],


                            scopes: ['openid', 'profile'],


                        })


                            .then(function (err) {


                                console.log(err);


                            });


                    });


            } else {


                oktaSignIn.renderEl(


                    { el: '#okta-login-container' },


                    function (res) {


                        if (res.status === 'IDP_DISCOVERY') {


                            res.idpDiscovery.redirectToIdp(webSiteUrl);


                        };


                        if (res.status === 'SUCCESS') {


                            //replaced with getQueryString to handle IE issues with URL


                            c = getQueryString("fromURI");


                            if (c)


                                location.href = c;


                            else


                                location.href = res[0].claims.URLHeader //pulls users ds365 tenant path from Okta


                        }


                    });


            }


        });





        function getQueryString() {


            var key = false, res = {}, itm = null;


            // get the query string without the ?


            var qs = location.search.substring(1);


            // check for the key as an argument


            if (arguments.length > 0 && arguments[0].length > 1)


                key = arguments[0];


            // make a regex pattern to grab key/value


            var pattern = /([^&=]+)=([^&]*)/g;


            // loop the items in the query string, either


            // find a match to the argument, or build an object


            // with key/value pairs


            while (itm = pattern.exec(qs)) {


                if (key !== false && decodeURIComponent(itm[1]) === key)


                    return decodeURIComponent(itm[2]);


                else if (key === false)


                    res[decodeURIComponent(itm[1])] = decodeURIComponent(itm[2]);


            }





            return key === false ? res : null;


        }


    </script>


</body>


</html>